---
interface Props {
	title: string;
	body: string;
	href: string;
}

const { href, title, body } = Astro.props;
---



<li class="link-card">
	<a class="flex flex-row items-center p-4 bg-white border border-gray-200 rounded-2xl shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">
		<img class="object-cover rounded-t-lg h-16 md:h-auto w-16 md:rounded-none md:rounded-l-lg" src=`/assets/logos/${title}.svg` alt=`Logo de ${title}`>
		<div class="flex flex-col justify-between p-4 leading-normal">
			<h2 class="card-title mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
				{title}
			</h2>
			<p class="card-body mb-3 font-normal text-gray-700 dark:text-gray-400">{body}</p>
		</div>

		<button
		type="button"
		data-link={href}
		onclick="copyLink(this)" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">

			<svg  xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
				<path fill="currentColor"
				d="M13 20.5a5.006 5.006 0 0 0 5-5V6.743a3.973 3.973 0 0 0-1.172-2.829l-2.242-2.242A3.972 3.972 0 0 0 11.757.5H7a5.006 5.006 0 0 0-5 5v10a5.006 5.006 0 0 0 5 5h6Zm-9-5v-10a3 3 0 0 1 3-3s4.92.014 5 .024V4.5a2 2 0 0 0 2 2h1.976c.01.081.024 9 .024 9a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3Zm18-7v11a5.006 5.006 0 0 1-5 5H8a1 1 0 0 1 0-2h9a3 3 0 0 0 3-3v-11a1 1 0 1 1 2 0Z"/>
			</svg>
				
			<span class="sr-only">Copiar Link</span>
		  </button>

		  <button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center mr-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
			<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
			  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
			</svg>
			<span class="sr-only">Icon description</span>
		  </button>
	</a>
</li>

<script is:inline>
    function copyLink(button) {
        const link = button.getAttribute('data-link');

        if (link) {
            const dummyInput = document.createElement('input');
            dummyInput.value = link;
            document.body.appendChild(dummyInput);
            dummyInput.select();
            document.execCommand('copy');
            document.body.removeChild(dummyInput);

            // Crear el elemento del toast
            const toast = document.createElement('div');
            toast.id = 'toast-simple';
            toast.className = 'flex items-center w-full max-w-xs p-4 space-x-4 text-gray-500 bg-white divide-x divide-gray-200 rounded-lg shadow dark:text-gray-400 dark:divide-gray-700 space-x dark:bg-gray-800';
            toast.role = 'alert';
            toast.innerHTML = `
                <div class="text-sm font-normal">ðŸŽ‰ Link copiado con exito!</div>
            `;

            // Agregar el toast al contenedor
            const toastContainer = document.getElementById('toast-container');
            toastContainer.appendChild(toast);

            // Remover el toast despuÃ©s de un tiempo
            setTimeout(() => {
                toastContainer.removeChild(toast);
            }, 5000); // Remover el toast despuÃ©s de 5 segundos (ajusta este valor segÃºn tus necesidades)
        }
    }
</script>

