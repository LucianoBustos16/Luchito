--- 
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Una biblioteca para ayudarte a encontrar herramientas para mejorar tu flujo de trabajo y dar vida a las ideas más rápido.">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>

	<body class="text-slate-500 dark:text-slate-400 bg-white dark:bg-slate-800 m-8">
		<script is:inline>
			// This code is inlined in the head to make dark mode instant & blocking.
			const getThemePreference = () => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			};
			const isDark = getThemePreference() === 'dark';
			document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
		
			if (typeof localStorage !== 'undefined') {
				// Watch the document element and persist user preference when it changes.
				const observer = new MutationObserver(() => {
					const isDark = document.documentElement.classList.contains('dark');
					localStorage.setItem('theme', isDark ? 'dark' : 'light');
				});
				observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
			}
		</script>
		<slot />
	</body>
</html>

<div id="toast-container" class="fixed top-4 right-4 z-50"></div>
